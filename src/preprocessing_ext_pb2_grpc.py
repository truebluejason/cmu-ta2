# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import core_pb2 as core__pb2
import preprocessing_ext_pb2 as preprocessing__ext__pb2


class PreprocessingExtStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CompilePipeline = channel.unary_unary(
        '/PreprocessingExt/CompilePipeline',
        request_serializer=preprocessing__ext__pb2.PipelineConfig.SerializeToString,
        response_deserializer=preprocessing__ext__pb2.CompileResponse.FromString,
        )
    self.SetPreprocessing = channel.unary_unary(
        '/PreprocessingExt/SetPreprocessing',
        request_serializer=preprocessing__ext__pb2.PreprocessingConfig.SerializeToString,
        response_deserializer=core__pb2.Response.FromString,
        )


class PreprocessingExtServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def CompilePipeline(self, request, context):
    """Creates a pipeline from the supplied spec.  The pipeline can be immediately executed by a call to
    ExecutePipeline in the core API.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetPreprocessing(self, request, context):
    """Sets a previously compiled pipeline as the pre-processing step for any TA2 pipelines created in the same
    session.  When TA2 processes a CreatePipelines call, it should use the referenced pipeline as the initial
    set of primitives, and append the generated pipelines to that.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PreprocessingExtServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CompilePipeline': grpc.unary_unary_rpc_method_handler(
          servicer.CompilePipeline,
          request_deserializer=preprocessing__ext__pb2.PipelineConfig.FromString,
          response_serializer=preprocessing__ext__pb2.CompileResponse.SerializeToString,
      ),
      'SetPreprocessing': grpc.unary_unary_rpc_method_handler(
          servicer.SetPreprocessing,
          request_deserializer=preprocessing__ext__pb2.PreprocessingConfig.FromString,
          response_serializer=core__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'PreprocessingExt', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
